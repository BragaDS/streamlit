import streamlit as st
import numpy as np
import pandas as pd
import joblib
from PIL import Image

# Carregar modelos e outros dados necess√°rios
scaler = joblib.load("model/churn_scaler_model.joblib")
pca = joblib.load("model/churn_pca_model.joblib")
kmeans = joblib.load("model/churn_kmeans_model.joblib")
xgb = joblib.load("model/churn_xgb_model.joblib")

# T√≠tulos e mapeamentos
st.title("üöÄ Churn Analysis and Customer Segmentation: Unveiling Patterns with Machine Learning üöÄ")

gender_mapping = {'Feminino': 0, 'Masculino': 1}
country_mapping = {'Fran√ßa': 0, 'Alemanha': 1, 'Espanha': 2}

# Entrada de dados do usu√°rio
credit_score = st.number_input("Pontua√ß√£o de Cr√©dito", min_value=0)
country = st.selectbox("Selecione o Pa√≠s", ["Fran√ßa", "Alemanha", "Espanha"])
gender = st.radio("Selecione seu g√™nero", ["Masculino", "Feminino"])
age = st.number_input("Idade", min_value=18)
tenure = st.number_input("Tempo de Relacionamento com o Banco", min_value=0, max_value=10)
balance = st.number_input("Saldo em conta", format="%.2f", step=0.01)
products_number = st.number_input("Numero de servi√ßos com o Banco", min_value=1, max_value=4)
credit_card = st.radio("Possui cart√£o de cr√©dito?", ["Sim", "N√£o"])
active_member = st.radio("√â um membro ativo?", ["Sim", "N√£o"])
estimated_salary = st.number_input("Salario estimado", format="%.2f", step=0.01)

# Aplicar mapeamento
gender_numeric = gender_mapping[gender]
country_numeric = country_mapping[country]

# Criar DataFrame para XGBoost
data_xgb = {
    'credit_score': [credit_score],
    'country': [country_numeric],
    'gender': [gender_numeric],
    'age': [age],
    'tenure': [tenure],
    'balance': [balance],
    'products_number': [products_number],
    'credit_card': [1 if credit_card == 'Sim' else 0],
    'active_member': [1 if active_member == 'Sim' else 0],
    'estimated_salary': [estimated_salary]
}

# Criar DataFrame para KMeans
data_kmeans = {
    'credit_score': [credit_score],
    'country': [country_numeric],
    'gender': [gender_numeric],
    'age': [age],
    'tenure': [tenure],
    'balance': [balance],
    'products_number': [products_number],
    'credit_card': [1 if credit_card == 'Sim' else 0],
    'active_member': [1 if active_member == 'Sim' else 0],
    'estimated_salary': [estimated_salary]
}
df_xgb = pd.DataFrame(data_xgb)
df_kmeans = pd.DataFrame(data_kmeans)

# Aplicar escala aos dados para KMeans
df_scaled_kmeans = pd.DataFrame(scaler.transform(df_kmeans))

# Aplicar PCA para KMeans
df_pca_kmeans = pd.DataFrame(pca.transform(df_scaled_kmeans))

# Aplicar KMeans
group = kmeans.predict(df_pca_kmeans)

# Adicionar a coluna 'group' ao DataFrame df_xgb
df_xgb['group'] = group + 1

# Exibir o grupo atribu√≠do pelo KMeans
st.write("Grupo atribu√≠do pelo KMeans:", group[0]+1)

# Prever a probabilidade de churn com modelo XGBoost usando df_xgb
proba_churn = xgb.predict_proba(df_xgb)[:, 1]
# Adicionar a coluna 'proba_churn' ao DataFrame df_xgb
df_xgb['proba_churn'] = proba_churn

# Exibir a probabilidade de churn

# Definir o limiar para interpretar a probabilidade
limiar_churn = 0.5

# Exibir a probabilidade de churn
# Definir o limiar para interpretar a probabilidade
limiar_churn = 0.5

# Exibir a probabilidade de churn com estiliza√ß√£o
formatted_proba_churn = f"{proba_churn[0]*100:.2f}%"
st.markdown(f"<p style='color: {'red' if proba_churn[0] > limiar_churn else 'green'};'>Probabilidade de Churn (XGBoost): {formatted_proba_churn}</p>", unsafe_allow_html=True)


# Verificar se a probabilidade de churn √© maior que o limiar
if proba_churn[0] > limiar_churn:
    # Cliente propenso a sair
    st.markdown("**Este cliente est√° propenso a sair.**", unsafe_allow_html=True)
else:
    # Cliente n√£o propenso a sair
    st.markdown("**Este cliente n√£o est√° propenso a sair.**", unsafe_allow_html=True)





# Carregar imagens geradas no notebook
image_path_bar_chart = "img/bar_cluster.png"
image_path_scatter_plot = "img/Cluster_Churn.png"

# Exibir t√≠tulo do relat√≥rio
st.title("Entenda seu Grupo")

# Se√ß√£o 4.1: Clustering Analysis
st.header("4.1 An√°lise de Agrupamento (Clustering)")

st.markdown("""
Em nossa explora√ß√£o de churn de clientes, utilizamos An√°lise de Componentes Principais (PCA) e agrupamento KMeans para identificar grupos distintos dentro dos dados. O gr√°fico de dispers√£o subsequente ilustrou esses clusters, revelando padr√µes significativos. Ap√≥s uma an√°lise mais detalhada, ficou evidente que os grupos 3 e 2 exibiram uma menor suscetibilidade ao churn.

## Gr√°fico de Barras
Para visualizar a distribui√ß√£o de clientes em diferentes clusters, empregamos um gr√°fico de barras. Essa visualiza√ß√£o forneceu uma vis√£o clara da porcentagem de clientes em cada cluster.

## Gr√°ficos Adicionais
Ap√≥s nossa an√°lise inicial e conclus√µes, examinamos a distribui√ß√£o de caracter√≠sticas-chave dentro de cada cluster identificado. Os histogramas confirmaram descobertas anteriores, como o Grupo 3 exibindo taxas de churn mais baixas. Al√©m disso, o Grupo 3 tende a ter indiv√≠duos mais jovens, e aqueles com saldos mais baixos s√£o menos propensos a cancelar. Essas informa√ß√µes oferecem uma compreens√£o mais rica dos fatores que contribuem para a reten√ß√£o de clientes em clusters espec√≠ficos, confirmando as tend√™ncias identificadas por meio da an√°lise de boxplot.

√Ä medida que as empresas buscam implementar estrat√©gias direcionadas, essas percep√ß√µes refinadas podem orientar uma tomada de decis√£o mais eficaz e fomentar abordagens centradas no cliente.

## Conclus√£o
Nossa an√°lise, apoiada por m√©tricas, enfatiza percep√ß√µes chave nas din√¢micas de churn de clientes. Os resultados do agrupamento destacaram grupos espec√≠ficos, como os grupos 3 e 2, com porcentagens de churn mais baixas. Munidas dessa compreens√£o, as empresas podem formular estrat√©gias direcionadas para reter clientes e aprimorar a satisfa√ß√£o geral.

As porcentagens de churn para cada grupo s√£o as seguintes:

- Grupo 1: 22.90%
- Grupo 2: 17.58%
- Grupo 3: 13.43%
- Grupo 4: 26.31%

Essas m√©tricas oferecem uma perspectiva detalhada das propens√µes variadas para churn em diferentes segmentos de clientes, confirmando as conclus√µes derivadas da an√°lise de boxplot.
""")

# Inserir gr√°fico de barras
st.image(Image.open(image_path_bar_chart), caption='Gr√°fico de Barras - Distribui√ß√£o de Churn por Grupo', use_column_width=True)

# Inserir gr√°fico de dispers√£o com clusters marcados por churn
st.image(Image.open(image_path_scatter), caption='Gr√°fico de Dispers√£o com Clusters', use_column_width=True)

# Inserir gr√°fico de dispers√£o com clusters marcados por churn
st.image(Image.open(image_path_scatter_plot), caption='Gr√°fico de Dispers√£o com Clusters Marcados por Churn', use_column_width=True)
